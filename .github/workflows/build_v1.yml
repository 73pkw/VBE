name: CICD Vaanah-Backend

on:
  push:
    branches:
      - deploy

jobs:
# Test application Image
  test:
#    needs: build-and-push
    name: Vaanah Integration and Unit Test
    runs-on: ubuntu-latest
    strategy:
#      max-parallel: 4
      matrix:
        python-version: [3.9]
        include:
          - db: release_0
            db_port: 5432
    # env:
    #   COMPOSE_FILE: docker-compose.yml

    # services:
    #   postgres:
    #     image: postgres:13
    #     env:
    #       POSTGRES_USER: vaanah_user
    #       POSTGRES_PASSWORD: secretsecret
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        cd vaana_app/vaana_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Run Tests
      env:
        DB: ${{ matrix.db }}
        DB_USER: vaanah_user
        DB_HOST: vaanahdb.cvamgenajfwz.eu-central-1.rds.amazonaws.com
        DB_PORT: ${{ matrix.db_port }}
        DB_PASSWORD: secretsecret
      run: |
        cd vaana_app
        python manage.py collectstatic --noinput
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
        python manage.py test

# Coverage
    - name: Generate coverage report
      run: |
        cd vaana_app
#        export DJANGO_SETTINGS_MODULE=vaana_app.settings
        pip install pytest
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml

#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v2
#       with:
# #        token: ${{ secrets.CODECOV_TOKEN }}
# #        directory: ./coverage/reports/
# #        env_vars: OS,PYTHON
# #        fail_ci_if_error: true
# #        files: ./coverage1.xml,./coverage2.xml
#         flags: unittests
#         name: codecov-umbrella
#         path_to_write_report: ./coverage/codecov_report.txt
#         verbose: true

  build-and-deploy:
    needs: test
    name: Vaanah Build and Deploy
    runs-on: ubuntu-latest
    steps:
# Check status
    - name: Check commit status
      id: commit-status
      run: |
        # Check the status of the Git commit
        CURRENT_STATUS=$(curl --url https://api.github.com/vaanah/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
        echo "Current status is: $CURRENT_STATUS"
        while [ "${CURRENT_STATUS^^}" = "PENDING" ];
          do sleep 10;
          CURRENT_STATUS=$(curl --url https://api.github.com/vaanah/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
        done;
        echo "Current status is: $CURRENT_STATUS"
        if [ "${CURRENT_STATUS^^}" = "FAILURE" ];
          then echo "Commit status failed. Canceling execution";
          exit 1;
        fi
# Checkout Commit
    - name: Checkout
      uses: actions/checkout@v1

# Cache Memory
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
# Login to DockerHub
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

# Docker Build and Push
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile.django
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vaana-django:latest
        # cache-from: type=local,src=/tmp/.buildx-cache
        # cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

# Deploy to staging with Ansible Playbook
    - name: Play Ansible Playbook
      uses: arillso/action.playbook@master
      with:
        playbook: iac/deploy_dev.yml
        inventory: iac/hosts
        private_key: ${{ secrets.SSH_PRIVATE_KEY }}
#         galaxy_file: tests/requirements.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: 'false'
        ANSIBLE_DEPRECATION_WARNINGS: 'false'